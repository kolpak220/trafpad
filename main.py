import logging
from database import create_db, add_user, update_user, delete_user, get_user_data, get_ref

from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime
import os
import random

admins_id = [1634257885, 5747705509]

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '7269688779:AAFIhOQ4EfkJIvaASiAWb_td0-CFWtYDZmM'

storage = MemoryStorage()


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


class AddUserForm(StatesGroup):
    user_id = State()  # –ó–∞–ø—Ä–æ—Å user_id
    ref_link = State()  # –ó–∞–ø—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    bot_link = State()  # –ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
class EditUserForm(StatesGroup):
    user_id = State()  # –ó–∞–ø—Ä–æ—Å user_id
    ref_link = State()  # –ó–∞–ø—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
class DeleteUserForm(StatesGroup):
    user_id = State()
class ReferToLink(StatesGroup):
    ref_link = State()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    args = message.get_args()

    ref_link = get_ref(args)
    
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = get_user_data(user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    if user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –µ–≥–æ —Å—Å—ã–ª–∫–∞—Ö
        ref_link = user_data['ref_link']
        bot_link = user_data['bot_link']
        await bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Ç—Ä–∞—Ñ–µ—Ä!\n"
                             f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n"
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/hack777jet_bot?start={bot_link}")
    if user_id in admins_id:
        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
        admin_welcome_text = "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ."
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        inline_kb = InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        button1 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data='add_user')
        button2 = InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data='edit_user')
        button3 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='remove_user') 
        inline_kb.add(button1, button2, button3)

        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(message.chat.id, admin_welcome_text, reply_markup=inline_kb)
    elif ref_link:
        # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ –æ–±–æ–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∑–∏–Ω–æ –∏ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç."
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = "welcome_image.jpg"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
        keyboard = InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É —Å ref_link
        button1 = InlineKeyboardButton("üöÄ Lucky Jet (—Å–ø–æ—Å–æ–± ‚Ññ1)", callback_data='jet_lit')
        button2 = InlineKeyboardButton("üöÄ Lucky Jet (—Å–ø–æ—Å–æ–± ‚Ññ2)", callback_data='jet_big')
        button3 = InlineKeyboardButton("üí£ Mines –°–ò–ì–ù–ê–õ", callback_data='mines_lit')
        # button4 = InlineKeyboardButton("üß® Mines (—Å–ø–æ—Å–æ–± ‚Ññ2)", callback_data='mines_big')
        button5 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
        keyboard.add(button1).add(button2).add(button3).add(button5)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        with open(image_path, 'rb') as image_file:
            await bot.send_photo(
                message.chat.id, 
                photo=InputFile(image_file), 
                caption=welcome_text, 
                reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            )
        await ReferToLink.ref_link.set()
        state = dp.current_state(user=user_id)
        await state.update_data(ref_link=ref_link)
    else:
        # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ –æ–±–æ–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∑–∏–Ω–æ –∏ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç."
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = "welcome_image.jpg"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        with open(image_path, 'rb') as image_file:
            await bot.send_photo(message.chat.id, photo=InputFile(image_file), caption=welcome_text)


@dp.callback_query_handler(lambda c: c.data == 'jet_lit', state=ReferToLink.ref_link)
async def process_callback(callback_query: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    ref_link = data.get('ref_link')

    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
    button2 = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(button1).add(button2)

    with open('jet1.png', 'rb') as image_file:
        await bot.send_photo(
            callback_query.message.chat.id, 
            photo=InputFile(image_file), 
            caption="–ò–≥—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! ( –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç +500% ) \n\n*—Å—Ö–µ–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—Ç–∞–≤–æ–∫ (500-2000)*\n–í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∫–µ—Ç–∫—É, —Å—Ç–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª–∫—É 1 —Ä–∞–∑ –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º, –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∏–º –≤—Å—ë –∏ –∑–∞–±–∏—Ä–∞–µ–º –æ—Ç 2–• –¥–æ 3–•", 
            reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        )
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data == 'jet_big', state=ReferToLink.ref_link)
async def process_callback(callback_query: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    ref_link = data.get('ref_link')

    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
    button2 = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(button1).add(button2)

    with open('jet2.jpg', 'rb') as image_file:
        await bot.send_photo(
            callback_query.message.chat.id, 
            photo=InputFile(image_file), 
            caption="–ò–≥—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! ( –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç +500% )\n\n*—Å—Ö–µ–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ë–û–õ–¨–®–ò–• —Å—Ç–∞–≤–æ–∫ (2000+)*\n–í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∫–µ—Ç–∫—É, —Å—Ç–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª–∫—É 3 —Ä–∞–∑–∞ –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º, –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∏–º –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç —Å—É–º–º—ã –¥–µ–ø–∞ –∏ –∑–∞–±–∏—Ä–∞–µ–º –°–¢–†–û–ì–û –Ω–∞ 4.35–•", 
            reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        )
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    
@dp.callback_query_handler(lambda c: c.data == 'mines_lit', state=ReferToLink.ref_link)
async def process_callback(callback_query: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    ref_link = data.get('ref_link')

    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
    button2 = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(button1).add(button2)
    files = os.listdir('mines')
    
    
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    
    image_files = [f for f in files if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ .jpg, .png)
    random_image_file = random.choice(image_files)

    image_path = os.path.join('mines', random_image_file)
    with open(image_path, 'rb') as image_file:
        await bot.send_photo(
            callback_query.message.chat.id, 
            photo=InputFile(image_file), 
            caption="–°–∏–≥–Ω–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!!!\n\n–ò–≥—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! ( –ü–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç +500% )\n\n–í—ã–±–∏—Ä–∞–µ–º –ú–ò–ù–´, —Å—Ç–∞–≤–∏–º —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –≤—ã–≤–æ–¥–∏–º, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫—Ä—É–≥", 
            reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        )
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    
@dp.callback_query_handler(lambda c: c.data == 'mines_big', state=ReferToLink.ref_link)
async def process_callback(callback_query: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    ref_link = data.get('ref_link')

    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
    button2 = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(button1).add(button2)

    await bot.send_message(callback_query.from_user.id, "–ú–∏–Ω—ã 2", reply_markup=keyboard)
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)



@dp.callback_query_handler(lambda c: c.data == 'back', state=ReferToLink.ref_link)
async def process_callback(callback_query: CallbackQuery, state=FSMContext):
    data = await state.get_data()
    ref_link = data.get('ref_link')

    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –∫–∞–∫ –æ–±–æ–π—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∫–∞–∑–∏–Ω–æ –∏ –∑–∞–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏—Ç."
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = "welcome_image.jpg"
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π-—Å—Å—ã–ª–∫–æ–π
    keyboard = InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É —Å ref_link
    button1 = InlineKeyboardButton("üöÄ Lucky Jet (—Å–ø–æ—Å–æ–± ‚Ññ1)", callback_data='jet_lit')
    button2 = InlineKeyboardButton("üöÄ Lucky Jet (—Å–ø–æ—Å–æ–± ‚Ññ2)", callback_data='jet_big')
    button3 = InlineKeyboardButton("üí£ Mines (–°–ò–ì–ù–ê–õ)", callback_data='mines_lit')
    # button4 = InlineKeyboardButton("üß® Mines (—Å–ø–æ—Å–æ–± ‚Ññ2)", callback_data='mines_big')
    button5 = InlineKeyboardButton("üí∞ 1win üí∞", url=ref_link)
    keyboard.add(button1).add(button2).add(button3).add(button5)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    with open(image_path, 'rb') as image_file:
        await bot.send_photo(
            callback_query.message.chat.id, 
            photo=InputFile(image_file), 
            caption=welcome_text, 
            reply_markup=keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        )


    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)














@dp.callback_query_handler(lambda c: c.data == 'remove_user')
async def process_callback(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–£–¥–∞–ª–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await DeleteUserForm.user_id.set()
@dp.message_handler(state=DeleteUserForm.user_id)
async def process_ref_link(message: types.Message, state: FSMContext):
    user_id = message.text
    
    try:
        delete_user(int(user_id))
        await bot.send_message(message.from_user.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await bot.send_message(message.from_user.id,f"–û—à–∏–±–∫–∞: {e}")

    await state.finish()






@dp.callback_query_handler(lambda c: c.data == 'edit_user')
async def process_callback(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await EditUserForm.user_id.set()

@dp.message_handler(state=EditUserForm.user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    await state.update_data(user_id=user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî –∑–∞–ø—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    await EditUserForm.next()
    await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:")



# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@dp.message_handler(state=EditUserForm.ref_link)
async def process_ref_link(message: types.Message, state: FSMContext):
    ref_link = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ref_link –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    data = await state.get_data()
    user_id = data.get('user_id')
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
    try:
        update_user(int(user_id), {"ref_link":str(ref_link)})
        await bot.send_message(message.from_user.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    except Exception as e:
        await bot.send_message(message.from_user.id,f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await state.finish()










@dp.callback_query_handler(lambda c: c.data == 'add_user')
async def process_callback(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await AddUserForm.user_id.set()

@dp.message_handler(state=AddUserForm.user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    user_id = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    await state.update_data(user_id=user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî –∑–∞–ø—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    await AddUserForm.next()
    await bot.send_message(message.from_user.id,"–í–≤–µ–¥–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@dp.message_handler(state=AddUserForm.ref_link)
async def process_ref_link(message: types.Message, state: FSMContext):
    ref_link = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ref_link –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
    data = await state.get_data()
    user_id = data.get('user_id')
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é ‚Äî –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞
    try:
        add_user(int(user_id), ref_link)
        await bot.send_message(message.from_user.id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        await bot.send_message(message.from_user.id,f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await state.finish()






    
async def main():
    try:
        await dp.start_polling(bot)
        create_db()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
    finally:
        await bot.session.close()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    create_db()